import csv
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.sparse import csr_matrix, coo_matrix
np.set_printoptions(threshold=np.nan)
Reading Input File
In [2]:

file1 = pd.read_excel("Page Rank.xlsx")
In [3]:

file1.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 33 entries, 0 to 32
Data columns (total 5 columns):
Your ID    33 non-null int64
ID 1       33 non-null int64
ID 2       33 non-null int64
ID 3       33 non-null int64
ID 4       33 non-null int64
dtypes: int64(5)
memory usage: 1.4 KB
Converting the input file into dictonary
In [4]:

dict_p = file1.set_index('Your ID').T.to_dict('list')
#dict_p = file.to_dict(orient='index')
dict_p
Out[4]:
{301: [311, 333, 322, 312],
 302: [304, 351, 330, 331],
 303: [304, 320, 340, 331],
 304: [351, 340, 330, 303],
 309: [315, 324, 340, 324],
 311: [312, 313, 316, 319],
 314: [316, 344, 340, 349],
 315: [332, 324, 321, 324],
 316: [314, 344, 340, 349],
 319: [321, 348, 329, 330],
 320: [327, 324, 303, 350],
 321: [324, 332, 314, 324],
 323: [340, 324, 321, 307],
 324: [327, 331, 335, 339],
 327: [363, 331, 324, 324],
 328: [301, 330, 343, 316],
 329: [321, 324, 332, 315],
 330: [329, 311, 343, 304],
 331: [338, 302, 334, 303],
 334: [331, 338, 351, 350],
 338: [324, 316, 314, 331],
 339: [363, 324, 340, 345],
 340: [349, 345, 328, 314],
 341: [323, 314, 340, 315],
 342: [324, 350, 324, 324],
 343: [314, 344, 309, 330],
 344: [316, 314, 328, 324],
 345: [340, 328, 327, 314],
 348: [329, 321, 319, 330],
 349: [340, 343, 312, 316],
 350: [324, 334, 332, 342],
 351: [304, 328, 334, 312],
 363: [350, 342, 332, 315]}
Sorting the Values within the dictonary
In [5]:

sort_dict = {x:sorted(dict_p[x]) for x in dict_p.keys()}
sort_dict
Out[5]:
{301: [311, 312, 322, 333],
 302: [304, 330, 331, 351],
 303: [304, 320, 331, 340],
 304: [303, 330, 340, 351],
 309: [315, 324, 324, 340],
 311: [312, 313, 316, 319],
 314: [316, 340, 344, 349],
 315: [321, 324, 324, 332],
 316: [314, 340, 344, 349],
 319: [321, 329, 330, 348],
 320: [303, 324, 327, 350],
 321: [314, 324, 324, 332],
 323: [307, 321, 324, 340],
 324: [327, 331, 335, 339],
 327: [324, 324, 331, 363],
 328: [301, 316, 330, 343],
 329: [315, 321, 324, 332],
 330: [304, 311, 329, 343],
 331: [302, 303, 334, 338],
 334: [331, 338, 350, 351],
 338: [314, 316, 324, 331],
 339: [324, 340, 345, 363],
 340: [314, 328, 345, 349],
 341: [314, 315, 323, 340],
 342: [324, 324, 324, 350],
 343: [309, 314, 330, 344],
 344: [314, 316, 324, 328],
 345: [314, 327, 328, 340],
 348: [319, 321, 329, 330],
 349: [312, 316, 340, 343],
 350: [324, 332, 334, 342],
 351: [304, 312, 328, 334],
 363: [315, 332, 342, 350]}
Convert dictonary to numpy array
In [6]:

np_arr = np.array(sort_dict)
np_arr
Out[6]:
array({320: [303, 324, 327, 350], 321: [314, 324, 324, 332], 323: [307, 321, 324, 340], 324: [327, 331, 335, 339], 327: [324, 324, 331, 363], 328: [301, 316, 330, 343], 329: [315, 321, 324, 332], 330: [304, 311, 329, 343], 331: [302, 303, 334, 338], 334: [331, 338, 350, 351], 338: [314, 316, 324, 331], 339: [324, 340, 345, 363], 340: [314, 328, 345, 349], 341: [314, 315, 323, 340], 342: [324, 324, 324, 350], 343: [309, 314, 330, 344], 344: [314, 316, 324, 328], 345: [314, 327, 328, 340], 348: [319, 321, 329, 330], 349: [312, 316, 340, 343], 350: [324, 332, 334, 342], 351: [304, 312, 328, 334], 363: [315, 332, 342, 350], 301: [311, 312, 322, 333], 302: [304, 330, 331, 351], 303: [304, 320, 331, 340], 304: [303, 330, 340, 351], 309: [315, 324, 324, 340], 311: [312, 313, 316, 319], 314: [316, 340, 344, 349], 315: [321, 324, 324, 332], 316: [314, 340, 344, 349], 319: [321, 329, 330, 348]}, dtype=object)
Defining Keys as rows in Matrix & Values as Columns
In [7]:

row_ind = [k for k, v in sort_dict.items() for _ in range(len(v))]
col_ind = [i for ids in sort_dict.values() for i in ids]
#X = csr_matrix(([1]*len(row_ind), (row_ind, col_ind))) 
#print(X.toarray())
print(np.sort(pd.unique(row_ind)))
print(np.sort(pd.unique(col_ind)))
[301 302 303 304 309 311 314 315 316 319 320 321 323 324 327 328 329 330
 331 334 338 339 340 341 342 343 344 345 348 349 350 351 363]
[301 302 303 304 307 309 311 312 313 314 315 316 319 320 321 322 323 324
 327 328 329 330 331 332 333 334 335 338 339 340 342 343 344 345 348 349
 350 351 363]
In [8]:

sid = [301,302,303,304,305]
sid_map = {sid[i]: i for i in np.arange(len(sid))}
sid_map
Out[8]:
{301: 0, 302: 1, 303: 2, 304: 3, 305: 4}
Getting all Distinct IDs
In [9]:

map_ind = row_ind+col_ind
map_indx = sorted(pd.unique(map_ind))
print(map_indx)
[301, 302, 303, 304, 307, 309, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 363]
Mapping IDs to Index
In [10]:

mapping = {}
for i in range(0,40,1):
    #print(i)
    mapping[map_indx[i]] = i
    
mapping
Out[10]:
{301: 0,
 302: 1,
 303: 2,
 304: 3,
 307: 4,
 309: 5,
 311: 6,
 312: 7,
 313: 8,
 314: 9,
 315: 10,
 316: 11,
 319: 12,
 320: 13,
 321: 14,
 322: 15,
 323: 16,
 324: 17,
 327: 18,
 328: 19,
 329: 20,
 330: 21,
 331: 22,
 332: 23,
 333: 24,
 334: 25,
 335: 26,
 338: 27,
 339: 28,
 340: 29,
 341: 30,
 342: 31,
 343: 32,
 344: 33,
 345: 34,
 348: 35,
 349: 36,
 350: 37,
 351: 38,
 363: 39}
In [11]:

for i in sort_dict[324]:
    sort_dict[i] = mapping[i]
    print(sort_dict[i])
18
22
26
28
Generating Sparse Matrix
In [12]:

row = [mapping[j] for i,j in enumerate(row_ind)]
col = [mapping[j] for i,j in enumerate(col_ind)]
â€‹
In [16]:

X = csr_matrix(([1/4]*len(row),(row,col))) 
X = np.transpose(X)
X.toarray()
Out[16]:
array([[ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.25,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.25,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.25,  0.  ,  0.25,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.25,  0.  ,  0.25,  0.25,  0.  ,  0.25,  0.25,  0.25,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.25],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,
         0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,
         0.25,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.25,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,
         0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.5 ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.5 ,  0.  ,  0.  ,  0.25,  0.5 ,  0.  ,  0.25,  0.  ,
         0.5 ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.25,  0.25,  0.  ,  0.  ,  0.75,  0.  ,  0.25,  0.  ,  0.  ,
         0.  ,  0.25,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.25,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.25,  0.25,  0.  ,
         0.  ,  0.  ,  0.25,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.25,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.25,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.25,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,
         0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,
         0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.25,  0.  ,  0.25],
       [ 0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.25,  0.25,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.25,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.25,  0.25,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,
         0.25,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.25,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,
         0.25,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.25,  0.  ,  0.25],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.25,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.25,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.25,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.25,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.25,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.25],
       [ 0.  ,  0.25,  0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.25,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ],
       [ 0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.25,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,  0.  ,
         0.  ,  0.  ,  0.  ,  0.  ]])
Initializing Weight Matrix
In [112]:

w = np.repeat(1/40,40)
w = np.matrix(w)
w = (w.reshape(40,1))
w
Out[112]:
matrix([[ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025],
        [ 0.025]])
Calculating Page Rank Vector
In [113]:

num_iter= 1
from copy import deepcopy
ismatch = True
while(ismatch):
    old_v = w
    w = 0.15+(0.85*X*w)
    num_iter += 1
    for i in range(0,len(w)):
        ismatch = False
        if old_v[i] != w[i]:
            ismatch = True
print("Number of iterations: ",num_iter)
print("Popular Person : ",np.max(w))
Number of iterations:  146
Popular Person :  1.92472219174
In [114]:

np.transpose(old_v)
Out[114]:
matrix([[ 0.34594843,  0.39899893,  0.59469327,  0.64454223,  0.18864844,
          0.31000822,  0.40023145,  0.64554248,  0.23504918,  1.49331005,
          0.43015064,  1.28230839,  0.2795475 ,  0.27637232,  0.47546427,
          0.22351404,  0.181875  ,  1.92472219,  0.74795258,  0.92211027,
          0.43061956,  0.83161131,  1.17175965,  0.63189115,  0.22351404,
          0.61271326,  0.55900347,  0.52920049,  0.55900347,  1.61887891,
          0.15      ,  0.34794133,  0.75297986,  0.89982714,  0.6128    ,
          0.20940384,  1.08383069,  0.50376045,  0.50195406,  0.42772816]])
In [115]:

np.transpose(w)
Out[115]:
matrix([[ 0.34594843,  0.39899893,  0.59469327,  0.64454223,  0.18864844,
          0.31000822,  0.40023145,  0.64554248,  0.23504918,  1.49331005,
          0.43015064,  1.28230839,  0.2795475 ,  0.27637232,  0.47546427,
          0.22351404,  0.181875  ,  1.92472219,  0.74795258,  0.92211027,
          0.43061956,  0.83161131,  1.17175965,  0.63189115,  0.22351404,
          0.61271326,  0.55900347,  0.52920049,  0.55900347,  1.61887891,
          0.15      ,  0.34794133,  0.75297986,  0.89982714,  0.6128    ,
          0.20940384,  1.08383069,  0.50376045,  0.50195406,  0.42772816]])
In [116]:

new_list = w.tolist()
Index of Most popular Person
In [117]:

new_list.index(np.max(w))
Out[117]:
17
Unique the most Popular Person
In [118]:

for rno, index in mapping.items():
    if index == new_list.index(np.max(w)):
        print(rno)
324
